module Project where
data RE a          -- regular expressions over an alphabet defined by 'a'
    = Empty          -- empty regular expression
    | Sym a          -- match the given symbol
    | RE a :+: RE a  -- concatenation of two regular expressions
    | RE a :|: RE a  -- choice between two regular expressions
    | Rep (RE a)     -- zero or more repetitions of a regular expression
    | Rep1 (RE a)    -- one or more repetitions of a regular expression
    deriving (Show)


equalRE :: RE a -> Int
equalRE Empty = 0
equalRE _ = 1

isEmpty :: RE a -> RE a -- All "basic" Empty cases
isEmpty Empty = Empty
isEmpty (Rep (_)) = Empty
isEmpty (Rep1 (Empty)) = Empty
isEmpty (Rep1 (Rep(_))) = Empty
isEmpty (Empty :+: Empty) = Empty
isEmpty (Empty :+: b) = b
isEmpty (a :+: Empty) = a
isEmpty (_ :|: Empty) = Empty
isEmpty (Empty :|: _ ) = Empty
isEmpty (_ :|: (Rep (_))) = Empty
isEmpty ((Rep (_)) :|: _) = Empty
isEmpty (Rep1 (a)) = isEmpty(a)
isEmpty ( a :+: b ) 
	| equalRE(isEmpty(a)) == 0 && equalRE(isEmpty(b)) == 0 = Empty
	| otherwise = a
isEmpty ( a :|: b ) 
	| equalRE(isEmpty(a)) == 0 = Empty
	| equalRE(isEmpty(b)) == 0 = Empty
	| otherwise = a
isEmpty a = a -- Not empty

matchEmpty :: RE a -> Bool
matchEmpty a
	| equalRE(isEmpty(a)) == 0 = True
	| otherwise = False



firstMatches :: RE a -> [a]
firstMatches Empty = []
firstMatches (Sym a) = [a]
firstMatches ( a :+: b )
	| equalRE(isEmpty(a)) == 0 = firstMatches(a) ++ firstMatches(b)
	| otherwise = firstMatches(a)
firstMatches ( a :|: b ) = firstMatches(a) ++ firstMatches(b)
firstMatches (Rep (a)) = firstMatches(a)
firstMatches (Rep1 (a)) = firstMatches(a)


